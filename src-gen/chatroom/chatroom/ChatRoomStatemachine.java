/** Generated by YAKINDU Statechart Tools code generator. */
package chatroom.chatroom;

import chatroom.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ChatRoomStatemachine implements IChatRoomStatemachine {
	protected class SCINetworkImpl implements SCINetwork {
	
		private List<SCINetworkListener> listeners = new LinkedList<SCINetworkListener>();
		
		public List<SCINetworkListener> getListeners() {
			return listeners;
		}
		private SCINetworkOperationCallback operationCallback;
		
		public synchronized void setSCINetworkOperationCallback(
				SCINetworkOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean connected;
		
		
		public synchronized void raiseConnected() {
			connected = true;
			runCycle();
		}
		
		private boolean disconnected;
		
		
		public synchronized void raiseDisconnected() {
			disconnected = true;
			runCycle();
		}
		
		private boolean joined;
		
		
		public synchronized void raiseJoined() {
			joined = true;
			runCycle();
		}
		
		private boolean left;
		
		
		public synchronized void raiseLeft() {
			left = true;
			runCycle();
		}
		
		private boolean receive_message;
		
		private String receive_messageValue;
		
		
		public synchronized void raiseReceive_message(final String value) {
			receive_messageValue = value;
			receive_message = true;
			runCycle();
		}
		protected synchronized String getReceive_messageValue() {
			if (! receive_message ) 
				throw new IllegalStateException("Illegal event value access. Event Receive_message is not raised!");
			return receive_messageValue;
		}
		
		private boolean alive;
		
		
		public synchronized void raiseAlive() {
			alive = true;
			runCycle();
		}
		
		private boolean connect;
		
		private String connectValue;
		
		
		public synchronized boolean isRaisedConnect() {
			return connect;
		}
		
		protected synchronized void raiseConnect(String value) {
			connectValue = value;
			connect = true;
			for (SCINetworkListener listener : listeners) {
				listener.onConnectRaised(value);
			}
		}
		
		public synchronized String getConnectValue() {
			if (! connect ) 
				throw new IllegalStateException("Illegal event value access. Event Connect is not raised!");
			return connectValue;
		}
		
		private boolean disconnect;
		
		
		public synchronized boolean isRaisedDisconnect() {
			return disconnect;
		}
		
		protected void raiseDisconnect() {
			disconnect = true;
			for (SCINetworkListener listener : listeners) {
				listener.onDisconnectRaised();
			}
		}
		
		private boolean join;
		
		private long joinValue;
		
		
		public synchronized boolean isRaisedJoin() {
			return join;
		}
		
		protected synchronized void raiseJoin(long value) {
			joinValue = value;
			join = true;
			for (SCINetworkListener listener : listeners) {
				listener.onJoinRaised(value);
			}
		}
		
		public synchronized long getJoinValue() {
			if (! join ) 
				throw new IllegalStateException("Illegal event value access. Event Join is not raised!");
			return joinValue;
		}
		
		private boolean leave;
		
		
		public synchronized boolean isRaisedLeave() {
			return leave;
		}
		
		protected void raiseLeave() {
			leave = true;
			for (SCINetworkListener listener : listeners) {
				listener.onLeaveRaised();
			}
		}
		
		private boolean poll;
		
		
		public synchronized boolean isRaisedPoll() {
			return poll;
		}
		
		protected void raisePoll() {
			poll = true;
			for (SCINetworkListener listener : listeners) {
				listener.onPollRaised();
			}
		}
		
		private boolean send_message;
		
		private String send_messageValue;
		
		
		public synchronized boolean isRaisedSend_message() {
			return send_message;
		}
		
		protected synchronized void raiseSend_message(String value) {
			send_messageValue = value;
			send_message = true;
			for (SCINetworkListener listener : listeners) {
				listener.onSend_messageRaised(value);
			}
		}
		
		public synchronized String getSend_messageValue() {
			if (! send_message ) 
				throw new IllegalStateException("Illegal event value access. Event Send_message is not raised!");
			return send_messageValue;
		}
		
		protected void clearEvents() {
			connected = false;
			disconnected = false;
			joined = false;
			left = false;
			receive_message = false;
			alive = false;
		}
		protected void clearOutEvents() {
		
		connect = false;
		disconnect = false;
		join = false;
		leave = false;
		poll = false;
		send_message = false;
		}
		
	}
	
	
	protected class SCIUIImpl implements SCIUI {
	
		private SCIUIOperationCallback operationCallback;
		
		public synchronized void setSCIUIOperationCallback(
				SCIUIOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean input;
		
		private String inputValue;
		
		
		public synchronized void raiseInput(final String value) {
			inputValue = value;
			input = true;
			runCycle();
		}
		protected synchronized String getInputValue() {
			if (! input ) 
				throw new IllegalStateException("Illegal event value access. Event Input is not raised!");
			return inputValue;
		}
		
		protected void clearEvents() {
			input = false;
		}
	}
	
	
	protected class SCIUtilImpl implements SCIUtil {
	
		private SCIUtilOperationCallback operationCallback;
		
		public synchronized void setSCIUtilOperationCallback(
				SCIUtilOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected SCINetworkImpl sCINetwork;
	
	protected SCIUIImpl sCIUI;
	
	protected SCIUtilImpl sCIUtil;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_connecting,
		main_region_connected,
		main_region_joined,
		main_region_leaving,
		main_region_left,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	public ChatRoomStatemachine() {
		sCINetwork = new SCINetworkImpl();
		sCIUI = new SCIUIImpl();
		sCIUtil = new SCIUtilImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCINetwork.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCINetwork must be set.");
		}
		
		if (this.sCIUI.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIUI must be set.");
		}
		
		if (this.sCIUtil.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIUtil must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_connecting:
				main_region_connecting_react(true);
				break;
			case main_region_connected:
				main_region_connected_react(true);
				break;
			case main_region_joined:
				main_region_joined_react(true);
				break;
			case main_region_leaving:
				main_region_leaving_react(true);
				break;
			case main_region_left:
				main_region_left_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCINetwork.clearEvents();
		sCIUI.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCINetwork.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_connecting:
			return stateVector[0] == State.main_region_connecting;
		case main_region_connected:
			return stateVector[0] == State.main_region_connected;
		case main_region_joined:
			return stateVector[0] == State.main_region_joined;
		case main_region_leaving:
			return stateVector[0] == State.main_region_leaving;
		case main_region_left:
			return stateVector[0] == State.main_region_left;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCINetwork getSCINetwork() {
		return sCINetwork;
	}
	
	public SCIUI getSCIUI() {
		return sCIUI;
	}
	
	public SCIUtil getSCIUtil() {
		return sCIUtil;
	}
	
	/* Entry action for state 'connecting'. */
	private void entryAction_main_region_connecting() {
		sCINetwork.raiseConnect("localhost:8000");
	}
	
	/* Entry action for state 'connected'. */
	private void entryAction_main_region_connected() {
		sCIUI.operationCallback.add_message("connected to server", "info");
		
		sCINetwork.raiseJoin(1);
	}
	
	/* Entry action for state 'joined'. */
	private void entryAction_main_region_joined() {
		timer.setTimer(this, 0, (10 * 1000), false);
		
		sCIUI.operationCallback.add_message("joined room 1", "info");
	}
	
	/* Entry action for state 'leaving'. */
	private void entryAction_main_region_leaving() {
		sCINetwork.raiseLeave();
	}
	
	/* Entry action for state 'left'. */
	private void entryAction_main_region_left() {
		sCIUI.operationCallback.add_message("left room 1", "info");
	}
	
	/* Exit action for state 'joined'. */
	private void exitAction_main_region_joined() {
		timer.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state connecting */
	private void enterSequence_main_region_connecting_default() {
		entryAction_main_region_connecting();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_connecting;
	}
	
	/* 'default' enter sequence for state connected */
	private void enterSequence_main_region_connected_default() {
		entryAction_main_region_connected();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_connected;
	}
	
	/* 'default' enter sequence for state joined */
	private void enterSequence_main_region_joined_default() {
		entryAction_main_region_joined();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_joined;
	}
	
	/* 'default' enter sequence for state leaving */
	private void enterSequence_main_region_leaving_default() {
		entryAction_main_region_leaving();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_leaving;
	}
	
	/* 'default' enter sequence for state left */
	private void enterSequence_main_region_left_default() {
		entryAction_main_region_left();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_left;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state connecting */
	private void exitSequence_main_region_connecting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state connected */
	private void exitSequence_main_region_connected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state joined */
	private void exitSequence_main_region_joined() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_joined();
	}
	
	/* Default exit sequence for state leaving */
	private void exitSequence_main_region_leaving() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state left */
	private void exitSequence_main_region_left() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_connecting:
			exitSequence_main_region_connecting();
			break;
		case main_region_connected:
			exitSequence_main_region_connected();
			break;
		case main_region_joined:
			exitSequence_main_region_joined();
			break;
		case main_region_leaving:
			exitSequence_main_region_leaving();
			break;
		case main_region_left:
			exitSequence_main_region_left();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_connecting_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_connecting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCINetwork.connected) {
					exitSequence_main_region_connecting();
					enterSequence_main_region_connected_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_connected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCINetwork.joined) {
					exitSequence_main_region_connected();
					enterSequence_main_region_joined_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_joined_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((sCIUI.input) && ((sCIUI.getInputValue()== null?"k" ==null :sCIUI.getInputValue().equals("k"))))) {
					exitSequence_main_region_joined();
					enterSequence_main_region_leaving_default();
				} else {
					if (timeEvents[0]) {
						exitSequence_main_region_joined();
						enterSequence_main_region_leaving_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_leaving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCINetwork.left) {
					exitSequence_main_region_leaving();
					enterSequence_main_region_left_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_left_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
