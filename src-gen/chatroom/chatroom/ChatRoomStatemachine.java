/** Generated by YAKINDU Statechart Tools code generator. */
package chatroom.chatroom;

import chatroom.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ChatRoomStatemachine implements IChatRoomStatemachine {
	protected class SCINetworkImpl implements SCINetwork {
	
		private List<SCINetworkListener> listeners = new LinkedList<SCINetworkListener>();
		
		public List<SCINetworkListener> getListeners() {
			return listeners;
		}
		private SCINetworkOperationCallback operationCallback;
		
		public synchronized void setSCINetworkOperationCallback(
				SCINetworkOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean connected;
		
		
		public void raiseConnected() {
			synchronized(ChatRoomStatemachine.this) {
				connected = true;
				runCycle();
			}
		}
		
		private boolean disconnected;
		
		
		public void raiseDisconnected() {
			synchronized(ChatRoomStatemachine.this) {
				disconnected = true;
				runCycle();
			}
		}
		
		private boolean joined;
		
		
		public void raiseJoined() {
			synchronized(ChatRoomStatemachine.this) {
				joined = true;
				runCycle();
			}
		}
		
		private boolean left;
		
		
		public void raiseLeft() {
			synchronized(ChatRoomStatemachine.this) {
				left = true;
				runCycle();
			}
		}
		
		private boolean receive_message;
		
		private String receive_messageValue;
		
		
		public void raiseReceive_message(final String value) {
			synchronized(ChatRoomStatemachine.this) {
				receive_messageValue = value;
				receive_message = true;
				runCycle();
			}
		}
		protected String getReceive_messageValue() {
			synchronized(ChatRoomStatemachine.this) {
				if (! receive_message ) 
					throw new IllegalStateException("Illegal event value access. Event Receive_message is not raised!");
				return receive_messageValue;
			}
		}
		
		private boolean alive;
		
		
		public void raiseAlive() {
			synchronized(ChatRoomStatemachine.this) {
				alive = true;
				runCycle();
			}
		}
		
		private boolean connect;
		
		private String connectValue;
		
		
		public boolean isRaisedConnect() {
			synchronized(ChatRoomStatemachine.this) {
				return connect;
			}
		}
		
		protected void raiseConnect(String value) {
			synchronized(ChatRoomStatemachine.this) {
				connectValue = value;
				connect = true;
				for (SCINetworkListener listener : listeners) {
					listener.onConnectRaised(value);
				}
			}
		}
		
		public String getConnectValue() {
			synchronized(ChatRoomStatemachine.this) {
				if (! connect ) 
					throw new IllegalStateException("Illegal event value access. Event Connect is not raised!");
				return connectValue;
			}
		}
		
		private boolean disconnect;
		
		
		public boolean isRaisedDisconnect() {
			synchronized(ChatRoomStatemachine.this) {
				return disconnect;
			}
		}
		
		protected void raiseDisconnect() {
			synchronized(ChatRoomStatemachine.this) {
				disconnect = true;
				for (SCINetworkListener listener : listeners) {
					listener.onDisconnectRaised();
				}
			}
		}
		
		private boolean join;
		
		private long joinValue;
		
		
		public boolean isRaisedJoin() {
			synchronized(ChatRoomStatemachine.this) {
				return join;
			}
		}
		
		protected void raiseJoin(long value) {
			synchronized(ChatRoomStatemachine.this) {
				joinValue = value;
				join = true;
				for (SCINetworkListener listener : listeners) {
					listener.onJoinRaised(value);
				}
			}
		}
		
		public long getJoinValue() {
			synchronized(ChatRoomStatemachine.this) {
				if (! join ) 
					throw new IllegalStateException("Illegal event value access. Event Join is not raised!");
				return joinValue;
			}
		}
		
		private boolean leave;
		
		
		public boolean isRaisedLeave() {
			synchronized(ChatRoomStatemachine.this) {
				return leave;
			}
		}
		
		protected void raiseLeave() {
			synchronized(ChatRoomStatemachine.this) {
				leave = true;
				for (SCINetworkListener listener : listeners) {
					listener.onLeaveRaised();
				}
			}
		}
		
		private boolean poll;
		
		
		public boolean isRaisedPoll() {
			synchronized(ChatRoomStatemachine.this) {
				return poll;
			}
		}
		
		protected void raisePoll() {
			synchronized(ChatRoomStatemachine.this) {
				poll = true;
				for (SCINetworkListener listener : listeners) {
					listener.onPollRaised();
				}
			}
		}
		
		private boolean send_message;
		
		private String send_messageValue;
		
		
		public boolean isRaisedSend_message() {
			synchronized(ChatRoomStatemachine.this) {
				return send_message;
			}
		}
		
		protected void raiseSend_message(String value) {
			synchronized(ChatRoomStatemachine.this) {
				send_messageValue = value;
				send_message = true;
				for (SCINetworkListener listener : listeners) {
					listener.onSend_messageRaised(value);
				}
			}
		}
		
		public String getSend_messageValue() {
			synchronized(ChatRoomStatemachine.this) {
				if (! send_message ) 
					throw new IllegalStateException("Illegal event value access. Event Send_message is not raised!");
				return send_messageValue;
			}
		}
		
		protected void clearEvents() {
			connected = false;
			disconnected = false;
			joined = false;
			left = false;
			receive_message = false;
			alive = false;
		}
		protected void clearOutEvents() {
		
		connect = false;
		disconnect = false;
		join = false;
		leave = false;
		poll = false;
		send_message = false;
		}
		
	}
	
	
	protected class SCIUIImpl implements SCIUI {
	
		private SCIUIOperationCallback operationCallback;
		
		public synchronized void setSCIUIOperationCallback(
				SCIUIOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean input;
		
		private String inputValue;
		
		
		public void raiseInput(final String value) {
			synchronized(ChatRoomStatemachine.this) {
				inputValue = value;
				input = true;
				runCycle();
			}
		}
		protected String getInputValue() {
			synchronized(ChatRoomStatemachine.this) {
				if (! input ) 
					throw new IllegalStateException("Illegal event value access. Event Input is not raised!");
				return inputValue;
			}
		}
		
		protected void clearEvents() {
			input = false;
		}
	}
	
	
	protected class SCIUtilImpl implements SCIUtil {
	
		private SCIUtilOperationCallback operationCallback;
		
		public synchronized void setSCIUtilOperationCallback(
				SCIUtilOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected SCINetworkImpl sCINetwork;
	
	protected SCIUIImpl sCIUI;
	
	protected SCIUtilImpl sCIUtil;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Disconnected,
		main_region_Disconnected_disconnected_region_connecting,
		main_region_Disconnected_disconnected_region_sudden_disconnection,
		main_region_Connected,
		main_region_Connected_connection_lifetime_region_ConnectionFlow,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage,
		main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage,
		main_region_Connected_polling_region_Polling,
		main_region_Connected_polling_region_Polling_polling_1_pollinginput,
		main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll,
		main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive,
		main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput,
		main_region_Connected_polling_region_Disconnecting,
		$NullState$
	};
	
	private State[] historyVector = new State[2];
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private long currentserverindex;
	
	protected long getCurrentserverindex() {
		synchronized(ChatRoomStatemachine.this) {
			return currentserverindex;
		}
	}
	
	protected void setCurrentserverindex(long value) {
		synchronized(ChatRoomStatemachine.this) {
			this.currentserverindex = value;
		}
	}
	
	
	private String inputafterlastpoll;
	
	protected String getInputafterlastpoll() {
		synchronized(ChatRoomStatemachine.this) {
			return inputafterlastpoll;
		}
	}
	
	protected void setInputafterlastpoll(String value) {
		synchronized(ChatRoomStatemachine.this) {
			this.inputafterlastpoll = value;
		}
	}
	
	
	private String currentroomid;
	
	protected String getCurrentroomid() {
		synchronized(ChatRoomStatemachine.this) {
			return currentroomid;
		}
	}
	
	protected void setCurrentroomid(String value) {
		synchronized(ChatRoomStatemachine.this) {
			this.currentroomid = value;
		}
	}
	
	
	public ChatRoomStatemachine() {
		sCINetwork = new SCINetworkImpl();
		sCIUI = new SCIUIImpl();
		sCIUtil = new SCIUtilImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCINetwork.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCINetwork must be set.");
		}
		
		if (this.sCIUI.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIUI must be set.");
		}
		
		if (this.sCIUtil.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIUtil must be set.");
		}
		
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 2; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setCurrentserverindex(0);
		
		setInputafterlastpoll("");
		
		setCurrentroomid("");
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Disconnected_disconnected_region_connecting:
				main_region_Disconnected_disconnected_region_connecting_react(true);
				break;
			case main_region_Disconnected_disconnected_region_sudden_disconnection:
				main_region_Disconnected_disconnected_region_sudden_disconnection_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_react(true);
				break;
			case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
				main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage_react(true);
				break;
			case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
				main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll_react(true);
				break;
			case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
				main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive_react(true);
				break;
			case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
				main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_react(true);
				break;
			case main_region_Connected_polling_region_Disconnecting:
				main_region_Connected_polling_region_Disconnecting_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCINetwork.clearEvents();
		sCIUI.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCINetwork.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Disconnected:
			return stateVector[0].ordinal() >= State.
					main_region_Disconnected.ordinal()&& stateVector[0].ordinal() <= State.main_region_Disconnected_disconnected_region_sudden_disconnection.ordinal();
		case main_region_Disconnected_disconnected_region_connecting:
			return stateVector[0] == State.main_region_Disconnected_disconnected_region_connecting;
		case main_region_Disconnected_disconnected_region_sudden_disconnection:
			return stateVector[0] == State.main_region_Disconnected_disconnected_region_sudden_disconnection;
		case main_region_Connected:
			return stateVector[0].ordinal() >= State.
					main_region_Connected.ordinal()&& stateVector[0].ordinal() <= State.main_region_Connected_polling_region_Disconnecting.ordinal();
		case main_region_Connected_connection_lifetime_region_ConnectionFlow:
			return stateVector[0].ordinal() >= State.
					main_region_Connected_connection_lifetime_region_ConnectionFlow.ordinal()&& stateVector[0].ordinal() <= State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage.ordinal();
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			return stateVector[0] == State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage;
		case main_region_Connected_polling_region_Polling:
			return stateVector[1].ordinal() >= State.
					main_region_Connected_polling_region_Polling.ordinal()&& stateVector[1].ordinal() <= State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput.ordinal();
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput:
			return stateVector[1].ordinal() >= State.
					main_region_Connected_polling_region_Polling_polling_1_pollinginput.ordinal()&& stateVector[1].ordinal() <= State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput.ordinal();
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
			return stateVector[1] == State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
			return stateVector[1] == State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
			return stateVector[2] == State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput;
		case main_region_Connected_polling_region_Disconnecting:
			return stateVector[1] == State.main_region_Connected_polling_region_Disconnecting;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCINetwork getSCINetwork() {
		return sCINetwork;
	}
	
	public SCIUI getSCIUI() {
		return sCIUI;
	}
	
	public SCIUtil getSCIUtil() {
		return sCIUtil;
	}
	
	/* Entry action for state 'connecting'. */
	private void entryAction_main_region_Disconnected_disconnected_region_connecting() {
		timer.setTimer(this, 0, (10 * 1000), false);
		
		sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate("attempting to connect to ", sCINetwork.operationCallback.get_server(getCurrentserverindex())), "info");
		
		sCINetwork.raiseConnect(sCINetwork.operationCallback.get_server(getCurrentserverindex()));
	}
	
	/* Entry action for state 'sudden_disconnection'. */
	private void entryAction_main_region_Disconnected_disconnected_region_sudden_disconnection() {
		timer.setTimer(this, 1, (10 * 1000), false);
		
		sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate("attempting to connect to ", sCINetwork.operationCallback.get_server(getCurrentserverindex())), "info");
		
		sCINetwork.raiseConnect(sCINetwork.operationCallback.get_server(getCurrentserverindex()));
	}
	
	/* Entry action for state 'isconnected'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected() {
		timer.setTimer(this, 2, 100, false);
		
		sCIUI.operationCallback.add_message("connected to server", "info");
		
		sCIUI.operationCallback.input_command();
	}
	
	/* Entry action for state 'leaving'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving() {
		sCIUI.operationCallback.add_message("leaving chat room", "info");
		
		sCINetwork.raiseLeave();
	}
	
	/* Entry action for state 'left'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left() {
		sCIUI.operationCallback.add_message("left chat room and disconnecting from server.", "info");
		
		sCINetwork.raiseDisconnect();
	}
	
	/* Entry action for state 'selectingroom'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom() {
		sCIUI.operationCallback.input_join();
		
		sCIUI.operationCallback.add_message("Press a digit key to select a room.", "info");
	}
	
	/* Entry action for state 'setinputcommand'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand() {
		sCIUI.operationCallback.input_command();
		
		sCIUI.operationCallback.add_message("You can input a command now.You could try joining a room. To join a room,press j.", "info");
	}
	
	/* Entry action for state 'joined'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined() {
		sCIUI.operationCallback.input_command();
	}
	
	/* Entry action for state 'messagecommand'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand() {
		sCIUI.operationCallback.input_msg();
	}
	
	/* Entry action for state 'sendingmessage'. */
	private void entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage() {
		timer.setTimer(this, 3, 100, false);
		
		sCIUI.operationCallback.add_message(sCIUI.operationCallback.get_buffer(), "local_message");
		
		sCIUI.operationCallback.clear_input();
	}
	
	/* Entry action for state 'sendpoll'. */
	private void entryAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll() {
		timer.setTimer(this, 4, (20 * 1000), false);
		
		sCIUtil.operationCallback.print("polling connected server");
		
		setInputafterlastpoll("");
		
		sCINetwork.raisePoll();
	}
	
	/* Entry action for state 'serveralive'. */
	private void entryAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive() {
		timer.setTimer(this, 5, (10 * 1000), false);
		
		sCIUtil.operationCallback.print("connected server is still alive.");
	}
	
	/* Entry action for state 'Disconnecting'. */
	private void entryAction_main_region_Connected_polling_region_Disconnecting() {
		timer.setTimer(this, 6, (1 * 1000), false);
	}
	
	/* Exit action for state 'connecting'. */
	private void exitAction_main_region_Disconnected_disconnected_region_connecting() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'sudden_disconnection'. */
	private void exitAction_main_region_Disconnected_disconnected_region_sudden_disconnection() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'isconnected'. */
	private void exitAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'sendingmessage'. */
	private void exitAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'sendpoll'. */
	private void exitAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'serveralive'. */
	private void exitAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Disconnecting'. */
	private void exitAction_main_region_Connected_polling_region_Disconnecting() {
		timer.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state Disconnected */
	private void enterSequence_main_region_Disconnected_default() {
		enterSequence_main_region_Disconnected_disconnected_region_default();
	}
	
	/* 'default' enter sequence for state connecting */
	private void enterSequence_main_region_Disconnected_disconnected_region_connecting_default() {
		entryAction_main_region_Disconnected_disconnected_region_connecting();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Disconnected_disconnected_region_connecting;
	}
	
	/* 'default' enter sequence for state sudden_disconnection */
	private void enterSequence_main_region_Disconnected_disconnected_region_sudden_disconnection_default() {
		entryAction_main_region_Disconnected_disconnected_region_sudden_disconnection();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Disconnected_disconnected_region_sudden_disconnection;
	}
	
	/* 'default' enter sequence for state Connected */
	private void enterSequence_main_region_Connected_default() {
		enterSequence_main_region_Connected_connection_lifetime_region_default();
		enterSequence_main_region_Connected_polling_region_default();
	}
	
	/* 'default' enter sequence for state ConnectionFlow */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_default() {
		enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state isconnected */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state leaving */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state left */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state selectingroom */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state setinputcommand */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state joined */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state messagecommand */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state joining */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state enteringmessage */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state sendingmessage */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage_default() {
		entryAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Polling */
	private void enterSequence_main_region_Connected_polling_region_Polling_default() {
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_default();
	}
	
	/* 'default' enter sequence for state pollinginput */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_default() {
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_default();
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_default();
	}
	
	/* 'default' enter sequence for state sendpoll */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll_default() {
		entryAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll;
	}
	
	/* 'default' enter sequence for state serveralive */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive_default() {
		entryAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive;
	}
	
	/* 'default' enter sequence for state rememberinginput */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput;
	}
	
	/* 'default' enter sequence for state Disconnecting */
	private void enterSequence_main_region_Connected_polling_region_Disconnecting_default() {
		entryAction_main_region_Connected_polling_region_Disconnecting();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Connected_polling_region_Disconnecting;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region disconnected region */
	private void enterSequence_main_region_Disconnected_disconnected_region_default() {
		react_main_region_Disconnected_disconnected_region__entry_Default();
	}
	
	/* 'default' enter sequence for region connection lifetime region */
	private void enterSequence_main_region_Connected_connection_lifetime_region_default() {
		react_main_region_Connected_connection_lifetime_region__entry_Default();
	}
	
	/* deep enterSequence with history in child connection lifetime region */
	private void deepEnterSequence_main_region_Connected_connection_lifetime_region() {
		switch (historyVector[0]) {
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region connectionflow region */
	private void enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_default() {
		react_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region__entry_Default();
	}
	
	/* deep enterSequence with history in child connectionflow region */
	private void deepEnterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region() {
		switch (historyVector[1]) {
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_default();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region polling region */
	private void enterSequence_main_region_Connected_polling_region_default() {
		react_main_region_Connected_polling_region__entry_Default();
	}
	
	/* 'default' enter sequence for region polling_1 */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_default() {
		react_main_region_Connected_polling_region_Polling_polling_1__entry_Default();
	}
	
	/* 'default' enter sequence for region polling_1_poll */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_default() {
		react_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll__entry_Default();
	}
	
	/* 'default' enter sequence for region polling_1_input */
	private void enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_default() {
		react_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input__entry_Default();
	}
	
	/* Default exit sequence for state Disconnected */
	private void exitSequence_main_region_Disconnected() {
		exitSequence_main_region_Disconnected_disconnected_region();
	}
	
	/* Default exit sequence for state connecting */
	private void exitSequence_main_region_Disconnected_disconnected_region_connecting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Disconnected_disconnected_region_connecting();
	}
	
	/* Default exit sequence for state sudden_disconnection */
	private void exitSequence_main_region_Disconnected_disconnected_region_sudden_disconnection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Disconnected_disconnected_region_sudden_disconnection();
	}
	
	/* Default exit sequence for state Connected */
	private void exitSequence_main_region_Connected() {
		exitSequence_main_region_Connected_connection_lifetime_region();
		exitSequence_main_region_Connected_polling_region();
	}
	
	/* Default exit sequence for state isconnected */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
	}
	
	/* Default exit sequence for state leaving */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state left */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state selectingroom */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state setinputcommand */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state joined */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state messagecommand */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state joining */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state enteringmessage */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state sendingmessage */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
	}
	
	/* Default exit sequence for state Polling */
	private void exitSequence_main_region_Connected_polling_region_Polling() {
		exitSequence_main_region_Connected_polling_region_Polling_polling_1();
	}
	
	/* Default exit sequence for state sendpoll */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
	}
	
	/* Default exit sequence for state serveralive */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
	}
	
	/* Default exit sequence for state rememberinginput */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Disconnecting */
	private void exitSequence_main_region_Connected_polling_region_Disconnecting() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Connected_polling_region_Disconnecting();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Disconnected_disconnected_region_connecting:
			exitSequence_main_region_Disconnected_disconnected_region_connecting();
			break;
		case main_region_Disconnected_disconnected_region_sudden_disconnection:
			exitSequence_main_region_Disconnected_disconnected_region_sudden_disconnection();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
			break;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
			break;
		case main_region_Connected_polling_region_Disconnecting:
			exitSequence_main_region_Connected_polling_region_Disconnecting();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region disconnected region */
	private void exitSequence_main_region_Disconnected_disconnected_region() {
		switch (stateVector[0]) {
		case main_region_Disconnected_disconnected_region_connecting:
			exitSequence_main_region_Disconnected_disconnected_region_connecting();
			break;
		case main_region_Disconnected_disconnected_region_sudden_disconnection:
			exitSequence_main_region_Disconnected_disconnected_region_sudden_disconnection();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region connection lifetime region */
	private void exitSequence_main_region_Connected_connection_lifetime_region() {
		switch (stateVector[0]) {
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region connectionflow region */
	private void exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region() {
		switch (stateVector[0]) {
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
			break;
		case main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage:
			exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region polling region */
	private void exitSequence_main_region_Connected_polling_region() {
		switch (stateVector[1]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
			break;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
			break;
		case main_region_Connected_polling_region_Disconnecting:
			exitSequence_main_region_Connected_polling_region_Disconnecting();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region polling_1 */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1() {
		switch (stateVector[1]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
			break;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region polling_1_poll */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll() {
		switch (stateVector[1]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
			break;
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region polling_1_input */
	private void exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input() {
		switch (stateVector[2]) {
		case main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput:
			exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Disconnected_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Disconnected_disconnected_region__entry_Default() {
		enterSequence_main_region_Disconnected_disconnected_region_connecting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region__entry_Default() {
		enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_region_Connected_connection_lifetime_region__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NullState$) {
			deepEnterSequence_main_region_Connected_connection_lifetime_region();
		} else {
			enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Connected_polling_region_Polling_polling_1__entry_Default() {
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll__entry_Default() {
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input__entry_Default() {
		enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Connected_polling_region__entry_Default() {
		enterSequence_main_region_Connected_polling_region_Polling_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Disconnected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Disconnected_disconnected_region_connecting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Disconnected_react(try_transition)==false) {
				if (sCINetwork.connected) {
					exitSequence_main_region_Disconnected();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_default();
					historyVector[0] = stateVector[0];
					
					enterSequence_main_region_Connected_polling_region_default();
				} else {
					if (timeEvents[0]) {
						exitSequence_main_region_Disconnected_disconnected_region_connecting();
						setCurrentserverindex(currentserverindex<(sCINetwork.operationCallback.get_nr_of_servers() - 1) ? (currentserverindex + 1) : 0);
						
						enterSequence_main_region_Disconnected_disconnected_region_connecting_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Disconnected_disconnected_region_sudden_disconnection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Disconnected_react(try_transition)==false) {
				if (sCINetwork.connected) {
					exitSequence_main_region_Disconnected();
					enterSequence_main_region_Connected_default();
				} else {
					if (timeEvents[1]) {
						exitSequence_main_region_Disconnected_disconnected_region_sudden_disconnection();
						setCurrentserverindex(currentserverindex<(sCINetwork.operationCallback.get_nr_of_servers() - 1) ? (currentserverindex + 1) : 0);
						
						enterSequence_main_region_Disconnected_disconnected_region_sudden_disconnection_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (timeEvents[2]) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (sCINetwork.left) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_left_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (sCINetwork.disconnected) {
					exitSequence_main_region_Connected();
					enterSequence_main_region_Disconnected_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_default();
				} else {
					if (((sCIUI.input) && (sCIUtil.operationCallback.is_numerical(sCIUI.getInputValue())))) {
						exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
						setCurrentroomid(sCIUI.getInputValue());
						
						sCINetwork.raiseJoin(sCIUtil.operationCallback.stoi(getCurrentroomid()));
						
						enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining_default();
					} else {
						if (((sCIUI.input) && (!sCIUtil.operationCallback.is_numerical(sCIUI.getInputValue())))) {
							exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom();
							sCIUI.operationCallback.add_message("A room ID should be numerical.", "info");
							
							enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (((sCIUI.input) && ((sCIUI.getInputValue()== null?"j" ==null :sCIUI.getInputValue().equals("j"))))) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_setinputcommand();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (((sCIUI.input) && ((sCIUI.getInputValue()== null?"k" ==null :sCIUI.getInputValue().equals("k"))))) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_leaving_default();
				} else {
					if (((sCIUI.input) && ((sCIUI.getInputValue()== null?"l" ==null :sCIUI.getInputValue().equals("l"))))) {
						exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
						sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate("You are leaving room ", getCurrentroomid()), "info");
						
						enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_isconnected_default();
					} else {
						if (((sCIUI.input) && ((sCIUI.getInputValue()== null?"m" ==null :sCIUI.getInputValue().equals("m"))))) {
							exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
							sCIUI.operationCallback.add_message("You can now write messages. Press Enter to send a message", "info");
							
							enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand_default();
						} else {
							if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
								exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined();
								enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_selectingroom_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (((sCIUI.input) && (sCIUtil.operationCallback.is_alphanumerical(sCIUI.getInputValue())))) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
					sCIUI.operationCallback.append_to_buffer(sCIUI.getInputValue());
					
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_default();
				} else {
					if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
						exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_messagecommand();
						enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (sCINetwork.joined) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joining();
					sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate("joined room ", getCurrentroomid()), "info");
					
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (((sCIUI.input) && ((!sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue()) && !sCIUtil.operationCallback.is_enter(sCIUI.getInputValue()))))) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
					sCIUI.operationCallback.append_to_buffer(sCIUI.getInputValue());
					
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_default();
				} else {
					if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
						exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
						sCIUI.operationCallback.remove_last_in_buffer();
						
						enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage_default();
					} else {
						if (((sCIUI.input) && (sCIUtil.operationCallback.is_enter(sCIUI.getInputValue())))) {
							exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_enteringmessage();
							enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_connection_lifetime_region_ConnectionFlow_react(try_transition)==false) {
				if (timeEvents[3]) {
					exitSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_sendingmessage();
					enterSequence_main_region_Connected_connection_lifetime_region_ConnectionFlow_connectionflow_region_joined_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Polling_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Polling_polling_1_pollinginput_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_polling_region_Polling_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_polling_region_Polling_polling_1_pollinginput_react(try_transition)==false) {
				if (sCINetwork.alive) {
					exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll();
					enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive_default();
				} else {
					if (timeEvents[4]) {
						exitSequence_main_region_Connected_polling_region_Polling();
						sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate(sCIUtil.operationCallback.concatenate("server ", sCINetwork.operationCallback.get_server(getCurrentserverindex())), " is not responding. Disconnecting"), "info");
						
						sCIUI.operationCallback.add_message(sCIUtil.operationCallback.concatenate("Showing input sent after last poll: ", getInputafterlastpoll()), "info");
						
						enterSequence_main_region_Connected_polling_region_Disconnecting_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Connected_polling_region_Polling_polling_1_pollinginput_react(try_transition)==false) {
				if (timeEvents[5]) {
					exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_serveralive();
					enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_poll_sendpoll_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIUI.input) && (sCIUtil.operationCallback.is_alphanumerical(sCIUI.getInputValue())))) {
				exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
				setInputafterlastpoll(sCIUtil.operationCallback.concatenate(getInputafterlastpoll(), sCIUI.getInputValue()));
				
				enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_default();
			} else {
				if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
					exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
					setInputafterlastpoll(sCIUtil.operationCallback.remove_last_char(getInputafterlastpoll()));
					
					enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_default();
				} else {
					if (((sCIUI.input) && (sCIUtil.operationCallback.is_backspace(sCIUI.getInputValue())))) {
						exitSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput();
						setInputafterlastpoll(sCIUtil.operationCallback.concatenate(getInputafterlastpoll(), sCIUI.getInputValue()));
						
						enterSequence_main_region_Connected_polling_region_Polling_polling_1_pollinginput_polling_1_input_rememberinginput_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Connected_polling_region_Disconnecting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_main_region_Connected();
				sCIUI.operationCallback.add_message("Suddenly disconnected from chat server.", "info");
				
				sCIUI.operationCallback.add_message("Restoring previous session.", "info");
				
				enterSequence_main_region_Disconnected_disconnected_region_sudden_disconnection_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
