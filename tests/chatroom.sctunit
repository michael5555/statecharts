package chatroom.test

testclass ChatRoomTests for statechart ChatRoom {
	
	@Test
	operation connect_and_disconnect_first_in_server_list() {
		enter
		
		mock Network.get_server(0) returns ("localhost:8000")
		mock Network.get_server(1) returns ("localhost:8001")
		mock Network.get_nr_of_servers() returns (2)

		assert !active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Disconnected)
		
		raise Network.connected
		
		assert active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Connected.connected_region.isconnected)
		raise Network.joined
		assert active(main_region.Connected.connected_region.joined)
		raise UI.input: "k"
		assert active(main_region.Connected.connected_region.leaving)
		raise Network.left
		assert active(main_region.Connected.connected_region.left)

		exit
	}
	
	@Test
	operation connect_and_disconnect_second_in_server_list() {
		enter
		
		mock Network.get_server(0) returns ("localhost:8000")
		mock Network.get_server(1) returns ("localhost:8001")
		mock Network.get_nr_of_servers() returns (2)

		
		assert !active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Disconnected)
		raise Network.connected
		assert active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Connected.connected_region.isconnected)
		proceed 10 s
		raise Network.joined
		assert active(main_region.Connected.connected_region.joined)
		raise UI.input: "k"
		assert active(main_region.Connected.connected_region.leaving)
		raise Network.left
		assert active(main_region.Connected.connected_region.left)
		
		exit
	}
	
	@Test
	operation check_user_input_while_disconnected() {
		enter
		
		mock Network.get_server(0) returns ("localhost:8000")
		mock Network.get_server(1) returns ("localhost:8001")
		mock Network.get_nr_of_servers() returns (2)

		
		assert !active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Disconnected)
		raise UI.input: "k"
		raise UI.input: "j"
		raise UI.input: "k"
		raise UI.input: "j"
		assert active(ChatRoom.main_region.Disconnected)

		raise Network.connected
		assert active(ChatRoom.main_region.Connected)
		assert active(ChatRoom.main_region.Connected.connected_region.isconnected)
		raise Network.joined
		assert active(main_region.Connected.connected_region.joined)
		raise UI.input: "k"
		assert active(main_region.Connected.connected_region.leaving)
		raise Network.left
		assert active(main_region.Connected.connected_region.left)
		
		exit
	}

	
}
